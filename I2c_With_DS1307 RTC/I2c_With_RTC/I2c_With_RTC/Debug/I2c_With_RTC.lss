
I2c_With_RTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000244  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000805  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000613  00000000  00000000  00000b51  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000413  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001578  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b9  00000000  00000000  000015fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a9  00000000  00000000  000019b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001b5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 9b 00 	call	0x136	; 0x136 <main>
  64:	0c 94 20 01 	jmp	0x240	; 0x240 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <TWI_INIT>:



void TWI_INIT(uint8_t Bus_Speed)
{
	SET_BIT_INPUT(TWI_Port_Name, SDA);
  6c:	94 b3       	in	r25, 0x14	; 20
  6e:	9d 7f       	andi	r25, 0xFD	; 253
  70:	94 bb       	out	0x14, r25	; 20
	SET_BIT_INPUT(TWI_Port_Name, SCL);
  72:	94 b3       	in	r25, 0x14	; 20
  74:	9e 7f       	andi	r25, 0xFE	; 254
  76:	94 bb       	out	0x14, r25	; 20
	SET_BIT_HIGH(TWI_Port_Name, SDA);
  78:	95 b3       	in	r25, 0x15	; 21
  7a:	92 60       	ori	r25, 0x02	; 2
  7c:	95 bb       	out	0x15, r25	; 21
	SET_BIT_HIGH(TWI_Port_Name, SCL);
  7e:	95 b3       	in	r25, 0x15	; 21
  80:	91 60       	ori	r25, 0x01	; 1
  82:	95 bb       	out	0x15, r25	; 21
	TWI_Bit_Rate_Register = ((F_CPU / Bus_Speed) - 16) / 2;
  84:	28 2f       	mov	r18, r24
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	40 e0       	ldi	r20, 0x00	; 0
  8a:	50 e0       	ldi	r21, 0x00	; 0
  8c:	60 e0       	ldi	r22, 0x00	; 0
  8e:	72 e1       	ldi	r23, 0x12	; 18
  90:	8a e7       	ldi	r24, 0x7A	; 122
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 fe 00 	call	0x1fc	; 0x1fc <__udivmodsi4>
  98:	da 01       	movw	r26, r20
  9a:	c9 01       	movw	r24, r18
  9c:	40 97       	sbiw	r24, 0x10	; 16
  9e:	a1 09       	sbc	r26, r1
  a0:	b1 09       	sbc	r27, r1
  a2:	b6 95       	lsr	r27
  a4:	a7 95       	ror	r26
  a6:	97 95       	ror	r25
  a8:	87 95       	ror	r24
  aa:	80 b9       	out	0x00, r24	; 0
  ac:	08 95       	ret

000000ae <TWI_Start>:
}

uint8_t TWI_Start(uint8_t Slave_Address)
{
	TWI_Control_Register |= MASK(TWINT) | MASK(TWSTA) | MASK(TWEN);
  ae:	96 b7       	in	r25, 0x36	; 54
  b0:	94 6a       	ori	r25, 0xA4	; 164
  b2:	96 bf       	out	0x36, r25	; 54
	CLEAR_BIT(TWI_Control_Register, TWSTA);
  b4:	96 b7       	in	r25, 0x36	; 54
  b6:	9f 7d       	andi	r25, 0xDF	; 223
  b8:	96 bf       	out	0x36, r25	; 54
	while(READ_BIT(TWI_Control_Register, TWINT) == 0);
  ba:	06 b6       	in	r0, 0x36	; 54
  bc:	07 fe       	sbrs	r0, 7
  be:	fd cf       	rjmp	.-6      	; 0xba <TWI_Start+0xc>
	
	TWI_Data_Register = Slave_Address;
  c0:	83 b9       	out	0x03, r24	; 3
	TWI_Control_Register |= MASK(TWINT) | MASK(TWEN);
  c2:	86 b7       	in	r24, 0x36	; 54
  c4:	84 68       	ori	r24, 0x84	; 132
  c6:	86 bf       	out	0x36, r24	; 54
	while(READ_BIT(TWI_Control_Register, TWINT) == 0);
  c8:	06 b6       	in	r0, 0x36	; 54
  ca:	07 fe       	sbrs	r0, 7
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <TWI_Start+0x1a>
	
	return (TWI_Status_Register & 0xF8);
  ce:	81 b1       	in	r24, 0x01	; 1
}
  d0:	88 7f       	andi	r24, 0xF8	; 248
  d2:	08 95       	ret

000000d4 <TWI_Write>:


uint8_t TWI_Write(uint8_t Data)
{	
	TWI_Data_Register = Data;
  d4:	83 b9       	out	0x03, r24	; 3
	TWI_Control_Register |= MASK(TWINT) | MASK(TWEN);
  d6:	86 b7       	in	r24, 0x36	; 54
  d8:	84 68       	ori	r24, 0x84	; 132
  da:	86 bf       	out	0x36, r24	; 54
	while(READ_BIT(TWI_Control_Register, TWINT) == 0);
  dc:	06 b6       	in	r0, 0x36	; 54
  de:	07 fe       	sbrs	r0, 7
  e0:	fd cf       	rjmp	.-6      	; 0xdc <TWI_Write+0x8>
	
	return (TWI_Status_Register & 0xF8);
  e2:	81 b1       	in	r24, 0x01	; 1
}
  e4:	88 7f       	andi	r24, 0xF8	; 248
  e6:	08 95       	ret

000000e8 <TWI_Receive_Data>:


uint8_t TWI_Receive_Data(uint8_t *Data, uint8_t Condition)
{
  e8:	fc 01       	movw	r30, r24
	TWI_Control_Register |= MASK(TWINT) | MASK(TWEN) | (READ_BIT(Condition, 0)<<TWEA);
  ea:	86 b7       	in	r24, 0x36	; 54
  ec:	26 2f       	mov	r18, r22
  ee:	21 70       	andi	r18, 0x01	; 1
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	00 24       	eor	r0, r0
  f4:	36 95       	lsr	r19
  f6:	27 95       	ror	r18
  f8:	07 94       	ror	r0
  fa:	36 95       	lsr	r19
  fc:	27 95       	ror	r18
  fe:	07 94       	ror	r0
 100:	32 2f       	mov	r19, r18
 102:	20 2d       	mov	r18, r0
 104:	28 2b       	or	r18, r24
 106:	24 68       	ori	r18, 0x84	; 132
 108:	26 bf       	out	0x36, r18	; 54
	while(READ_BIT(TWI_Control_Register, TWINT) == 0);
 10a:	06 b6       	in	r0, 0x36	; 54
 10c:	07 fe       	sbrs	r0, 7
 10e:	fd cf       	rjmp	.-6      	; 0x10a <TWI_Receive_Data+0x22>
	CLEAR_BIT(TWI_Control_Register, TWEA);
 110:	96 b7       	in	r25, 0x36	; 54
 112:	9f 7b       	andi	r25, 0xBF	; 191
 114:	96 bf       	out	0x36, r25	; 54
	
	if(Data == NULL) return NULL_POINTER;
 116:	30 97       	sbiw	r30, 0x00	; 0
 118:	29 f0       	breq	.+10     	; 0x124 <TWI_Receive_Data+0x3c>
	*Data = TWI_Data_Register;
 11a:	83 b1       	in	r24, 0x03	; 3
 11c:	80 83       	st	Z, r24
	return (TWI_Status_Register & 0xF8);
 11e:	81 b1       	in	r24, 0x01	; 1
 120:	88 7f       	andi	r24, 0xF8	; 248
 122:	08 95       	ret
{
	TWI_Control_Register |= MASK(TWINT) | MASK(TWEN) | (READ_BIT(Condition, 0)<<TWEA);
	while(READ_BIT(TWI_Control_Register, TWINT) == 0);
	CLEAR_BIT(TWI_Control_Register, TWEA);
	
	if(Data == NULL) return NULL_POINTER;
 124:	8f ef       	ldi	r24, 0xFF	; 255
	*Data = TWI_Data_Register;
	return (TWI_Status_Register & 0xF8);
}
 126:	08 95       	ret

00000128 <TWI_End>:

void TWI_End()
{
	TWI_Control_Register |= MASK(TWINT) | MASK(TWSTO) | MASK(TWEN);
 128:	86 b7       	in	r24, 0x36	; 54
 12a:	84 69       	ori	r24, 0x94	; 148
 12c:	86 bf       	out	0x36, r24	; 54
	while(READ_BIT(TWI_Control_Register, TWSTO) == 1);
 12e:	06 b6       	in	r0, 0x36	; 54
 130:	04 fc       	sbrc	r0, 4
 132:	fd cf       	rjmp	.-6      	; 0x12e <TWI_End+0x6>
}
 134:	08 95       	ret

00000136 <main>:

#define Slave_Address_Write   0xD0
#define Slave_Address_Read    0xD1

int main(void)
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	00 d0       	rcall	.+0      	; 0x13c <main+0x6>
 13c:	1f 92       	push	r1
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
	Seconds_Direction = 0xFF;
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	87 bb       	out	0x17, r24	; 23
	Minutes_Direction = 0xFF;
 146:	8a bb       	out	0x1a, r24	; 26
	Hours_Direction   = 0xFF;
 148:	81 bb       	out	0x11, r24	; 17
	
	uint8_t status;
	uint8_t seconds = 0;
 14a:	19 82       	std	Y+1, r1	; 0x01
	uint8_t minutes = 0;
 14c:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t hours = 0;
 14e:	1b 82       	std	Y+3, r1	; 0x03
	
	TWI_INIT(Bus_Speed_100KHZ);
 150:	84 e6       	ldi	r24, 0x64	; 100
 152:	0e 94 36 00 	call	0x6c	; 0x6c <TWI_INIT>
	status = TWI_Start(Slave_Address_Write);
 156:	80 ed       	ldi	r24, 0xD0	; 208
 158:	0e 94 57 00 	call	0xae	; 0xae <TWI_Start>
	if(status != AddressWrite_Transmitted_ACK_Received) return 0;
 15c:	88 31       	cpi	r24, 0x18	; 24
 15e:	09 f0       	breq	.+2      	; 0x162 <main+0x2c>
 160:	45 c0       	rjmp	.+138    	; 0x1ec <main+0xb6>
	status = TWI_Write(0x07);
 162:	87 e0       	ldi	r24, 0x07	; 7
 164:	0e 94 6a 00 	call	0xd4	; 0xd4 <TWI_Write>
	if(status != Data_Transmitted_ACK_Received) return 0;
 168:	88 32       	cpi	r24, 0x28	; 40
 16a:	09 f0       	breq	.+2      	; 0x16e <main+0x38>
 16c:	3f c0       	rjmp	.+126    	; 0x1ec <main+0xb6>
	status = TWI_Write(1<<4);
 16e:	80 e1       	ldi	r24, 0x10	; 16
 170:	0e 94 6a 00 	call	0xd4	; 0xd4 <TWI_Write>
	if(status != Data_Transmitted_ACK_Received) return 0;
 174:	88 32       	cpi	r24, 0x28	; 40
 176:	d1 f5       	brne	.+116    	; 0x1ec <main+0xb6>
	TWI_End();
 178:	0e 94 94 00 	call	0x128	; 0x128 <TWI_End>

    while (1) 
    {
		status = TWI_Start(Slave_Address_Write);
 17c:	80 ed       	ldi	r24, 0xD0	; 208
 17e:	0e 94 57 00 	call	0xae	; 0xae <TWI_Start>
		if(status != AddressWrite_Transmitted_ACK_Received) return 0;
 182:	88 31       	cpi	r24, 0x18	; 24
 184:	99 f5       	brne	.+102    	; 0x1ec <main+0xb6>
		status = TWI_Write(0x00);
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	0e 94 6a 00 	call	0xd4	; 0xd4 <TWI_Write>
		if(status != Data_Transmitted_ACK_Received) return 0;
 18c:	88 32       	cpi	r24, 0x28	; 40
 18e:	71 f5       	brne	.+92     	; 0x1ec <main+0xb6>
		TWI_End();
 190:	0e 94 94 00 	call	0x128	; 0x128 <TWI_End>
		
		status = TWI_Start(Slave_Address_Read);
 194:	81 ed       	ldi	r24, 0xD1	; 209
 196:	0e 94 57 00 	call	0xae	; 0xae <TWI_Start>
		if(status != AddressRead_Transmitted_ACK_Received) return 0;
 19a:	80 34       	cpi	r24, 0x40	; 64
 19c:	39 f5       	brne	.+78     	; 0x1ec <main+0xb6>
		
		// Seconds
		status = TWI_Receive_Data(&seconds, Condition_ACK);
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	ce 01       	movw	r24, r28
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	0e 94 74 00 	call	0xe8	; 0xe8 <TWI_Receive_Data>
		if(status != Data_Recevied_ACK_Transmitted) return 0;
 1a8:	80 35       	cpi	r24, 0x50	; 80
 1aa:	01 f5       	brne	.+64     	; 0x1ec <main+0xb6>
		
		// Minutes
		status = TWI_Receive_Data(&minutes, Condition_ACK);
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	ce 01       	movw	r24, r28
 1b0:	02 96       	adiw	r24, 0x02	; 2
 1b2:	0e 94 74 00 	call	0xe8	; 0xe8 <TWI_Receive_Data>
		if(status != Data_Recevied_ACK_Transmitted) return 0;
 1b6:	80 35       	cpi	r24, 0x50	; 80
 1b8:	c9 f4       	brne	.+50     	; 0x1ec <main+0xb6>
		
		// Hours
		status = TWI_Receive_Data(&hours, Condition_NACK);
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	ce 01       	movw	r24, r28
 1be:	03 96       	adiw	r24, 0x03	; 3
 1c0:	0e 94 74 00 	call	0xe8	; 0xe8 <TWI_Receive_Data>
		if(status != Data_Recevied_NACK_Transmitted) return 0;
 1c4:	88 35       	cpi	r24, 0x58	; 88
 1c6:	91 f4       	brne	.+36     	; 0x1ec <main+0xb6>
		TWI_End();
 1c8:	0e 94 94 00 	call	0x128	; 0x128 <TWI_End>
		
		Seconds_Port = seconds;
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	88 bb       	out	0x18, r24	; 24
		Minutes_Port = minutes;
 1d0:	8a 81       	ldd	r24, Y+2	; 0x02
 1d2:	8b bb       	out	0x1b, r24	; 27
		Hours_Port   = hours;
 1d4:	8b 81       	ldd	r24, Y+3	; 0x03
 1d6:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d8:	2f ef       	ldi	r18, 0xFF	; 255
 1da:	89 e6       	ldi	r24, 0x69	; 105
 1dc:	98 e1       	ldi	r25, 0x18	; 24
 1de:	21 50       	subi	r18, 0x01	; 1
 1e0:	80 40       	sbci	r24, 0x00	; 0
 1e2:	90 40       	sbci	r25, 0x00	; 0
 1e4:	e1 f7       	brne	.-8      	; 0x1de <main+0xa8>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <main+0xb2>
 1e8:	00 00       	nop
 1ea:	c8 cf       	rjmp	.-112    	; 0x17c <main+0x46>
		
		_delay_ms(1000);
    }
	
	return 0;
}
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	0f 90       	pop	r0
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <__udivmodsi4>:
 1fc:	a1 e2       	ldi	r26, 0x21	; 33
 1fe:	1a 2e       	mov	r1, r26
 200:	aa 1b       	sub	r26, r26
 202:	bb 1b       	sub	r27, r27
 204:	fd 01       	movw	r30, r26
 206:	0d c0       	rjmp	.+26     	; 0x222 <__udivmodsi4_ep>

00000208 <__udivmodsi4_loop>:
 208:	aa 1f       	adc	r26, r26
 20a:	bb 1f       	adc	r27, r27
 20c:	ee 1f       	adc	r30, r30
 20e:	ff 1f       	adc	r31, r31
 210:	a2 17       	cp	r26, r18
 212:	b3 07       	cpc	r27, r19
 214:	e4 07       	cpc	r30, r20
 216:	f5 07       	cpc	r31, r21
 218:	20 f0       	brcs	.+8      	; 0x222 <__udivmodsi4_ep>
 21a:	a2 1b       	sub	r26, r18
 21c:	b3 0b       	sbc	r27, r19
 21e:	e4 0b       	sbc	r30, r20
 220:	f5 0b       	sbc	r31, r21

00000222 <__udivmodsi4_ep>:
 222:	66 1f       	adc	r22, r22
 224:	77 1f       	adc	r23, r23
 226:	88 1f       	adc	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	1a 94       	dec	r1
 22c:	69 f7       	brne	.-38     	; 0x208 <__udivmodsi4_loop>
 22e:	60 95       	com	r22
 230:	70 95       	com	r23
 232:	80 95       	com	r24
 234:	90 95       	com	r25
 236:	9b 01       	movw	r18, r22
 238:	ac 01       	movw	r20, r24
 23a:	bd 01       	movw	r22, r26
 23c:	cf 01       	movw	r24, r30
 23e:	08 95       	ret

00000240 <_exit>:
 240:	f8 94       	cli

00000242 <__stop_program>:
 242:	ff cf       	rjmp	.-2      	; 0x242 <__stop_program>
